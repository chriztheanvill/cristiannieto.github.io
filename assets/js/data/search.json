[
  
  {
    "title": "Portfolio",
    "url": "/cristiannieto.github.io/posts/portfolio/",
    "categories": "portfolio, software",
    "tags": "linux, cpp",
    "date": "2025-04-20 11:00:00 -0600",
    





    
    "snippet": "👨‍💻 Portfolio - Software Engineer | C++ DeveloperWelcome to my personal portfolio — a showcase of my professional journey, projects, and technical skills in software engineering with a strong focus...",
    "content": "👨‍💻 Portfolio - Software Engineer | C++ DeveloperWelcome to my personal portfolio — a showcase of my professional journey, projects, and technical skills in software engineering with a strong focus on C++, Linux, and high-performance systems development.  💡 This site is built using Markdown and hosted via GitHub Pages.🧾 Table of Contents  About Me  Professional Experience  Featured Projects  Technical Skills  Teamwork  Contact Me💼 About me💼 Professional Experience🔹 Freelance Work  Halliburton  Devbot  Citi/Actinver  KosmosGPS🔹 Hired Position  MSC - Mediterranean Shipping Company🚀 Featured Projects  Project 1: SDL2 Game Engine Prototype  Project 2: Godot + C++ Game🛠️ Technical Skills            Category      Skills                  C++ Standards      C++17, C++20, working toward C++26 adoption              Languages      C++, C#, PHP, JS              Paradigms      Object-Oriented Programming, Functional Programming              OS      Linux (Ubuntu, fedora, Debian, Immutable), Windows              IDEs      CLion, VScode              Build Systems      CMake, Conan Package Manager              VCS      Git, GitHub, GitLab CI/CD              Debug / Profiling      GDB, Valgrind, GProf, Perf              Databases      SQLite, MySql, SQLserver, Mongodb              Frameworks      SDL2, SQLite              Architectures      ECS, MVC, Singleton, Factory Pattern              Game Development      SDL2, ECS design, Godot, Unreal Engine      👥 TeamworkMost of my work has been done in teams ranging from 3 to 7 developers, collaborating through:  Code reviews  Agile sprints (Scrum)  Git-based workflows (feature branches, PRs)  Shared documentation and architecture diagrams📬 Contact Me📩 Email: enriquenietohdz@gmail.com🔗 LinkedIn: cristian_nieto 📁 GitHub: github.com/chriztheanvill"
  },
  
  {
    "title": "Mediterranean Shipping Company",
    "url": "/cristiannieto.github.io/posts/msc/",
    "categories": "portfolio, software",
    "tags": "linux, cpp",
    "date": "2025-04-11 11:00:00 -0600",
    





    
    "snippet": "🧾 Work ExperienceMediterranean Shipping Company – Data Systems DeveloperMexico DF, Mexico | InternalFebruary 2017 – December 2018During my two-year tenure at MSC, I was involved in the development ...",
    "content": "🧾 Work ExperienceMediterranean Shipping Company – Data Systems DeveloperMexico DF, Mexico | InternalFebruary 2017 – December 2018During my two-year tenure at MSC, I was involved in the development and maintenance of internal tools used by finance and administrative teams to manage large-scale shipping data. The role required a deep understanding of database systems, front-end interfaces, and backend logic, while also ensuring performance and security across environments.🔧 Technologies Used:  Frontend: HTML, CSS, JavaScript, jQuery  Backend: PHP (Vanilla), C++, Node.js (for final project)  Databases: MySQL (Development), SQL Server (Production)  Tools: FileZilla, SAP Integration APIs, JSON for data exchange📌 Key Projects &amp; Responsibilities:1. Internal GUI Development using PHP Vanilla  Developed user-friendly graphical interfaces for accountants and administrators to interact with financial and operational data.  Built read-only dashboards for database visualization, allowing non-technical users to extract insights without direct access to raw tables.  Ensured clean separation between business logic and presentation layers for maintainability.2. MySQL Database Development  Designed and maintained relational databases for internal systems.  Implemented triggers, indexes, and foreign key constraints to ensure data integrity and improve query performance.  Created and updated tables based on evolving business requirements.  Wrote complex queries to aggregate and analyze shipping and billing data.3. File Management via FTP (FileZilla)  Regularly retrieved and uploaded critical system files using FileZilla.  Debugged and fixed corrupted or misconfigured files before deployment to production servers.4. C++ Mini-Projects  Developed lightweight C++ applications to automate querying thousands of records from databases.  Implemented serialization and deserialization techniques to store and retrieve object states efficiently.  These programs were used internally for batch processing and report generation.5. SAP Invoice Automation  Built scripts to generate invoices programmatically and send them directly to SAP systems using integration protocols.  Reduced manual entry errors and improved invoice turnaround time significantly.6. Final Project: Node.js Migration  Led the transition of legacy PHP scripts into a more scalable Node.js environment.  Integrated RESTful APIs and improved response times through asynchronous processing.  Enhanced data handling using modern JavaScript practices and better error handling.⚠️ Challenges &amp; Solutions:Challenge: Legacy Codebase  Much of the existing code was written in vanilla PHP without any framework, making scalability and debugging difficult.Solution:Refactored code progressively, introduced modular structures, and documented processes to ease future development.Challenge: Performance Bottlenecks in MySQL  As datasets grew, queries became slower, especially when aggregating large volumes of shipping data.Solution:Optimized queries, added proper indexing, and restructured schema design using normalization and denormalization where appropriate.Challenge: Data Synchronization Across Environments  Differences between MySQL (development) and SQL Server (production) caused inconsistencies during deployment.Solution:Created migration scripts and validation checks to ensure compatibility and consistency between both platforms.📅 Reason for Leaving:The decision to leave was due to the impact of the COVID-19 pandemic on global operations and restructuring within the company. It provided an opportunity to explore new technologies and expand my professional horizons.💡 Highlights:  Strong full-stack experience with emphasis on backend and database development.  Proven ability to work in high-pressure environments and deliver robust solutions.  Familiarity with enterprise-level systems like SAP and production-grade databases such as SQL Server."
  },
  
  {
    "title": "Kosmos_GPS",
    "url": "/cristiannieto.github.io/posts/kosmos_gps/",
    "categories": "portfolio, software",
    "tags": "linux, cpp",
    "date": "2025-04-11 11:00:00 -0600",
    





    
    "snippet": "🧾 Kosmos GPS - Embedded &amp; Backend DevelopmentProject Title: Vehicle Tracking System - Embedded Device &amp; Backend CommunicationDuration: 2 yearsRole: Sole Developer🔧 Technologies Used:  C++17...",
    "content": "🧾 Kosmos GPS - Embedded &amp; Backend DevelopmentProject Title: Vehicle Tracking System - Embedded Device &amp; Backend CommunicationDuration: 2 yearsRole: Sole Developer🔧 Technologies Used:  C++17  CMake – Build system  Conan – Package management  Sockets – TCP/IP communication  Multi-threading – For concurrent tasks  MySQL Connector/C++ – Database integration  Arduino-based hardware📌 Overview:This project involved designing and implementing a complete vehicle tracking system from scratch. It included developing an embedded device to be installed in vehicles, capable of gathering real-time data such as geolocation and vehicle diagnostics. The collected data was then transmitted securely to a backend server for processing and storage.The backend, also developed by me, handled incoming data streams, stored them in a MySQL database, and provided APIs for the frontend application.🛠️ Key Features:  Embedded Device Setup: Custom Arduino-like board programmed in C++17 to interface with GPS modules and vehicle OBD-II systems.  Data Acquisition:          Real-time geolocation using GPS (compatible with Google Maps).      Vehicle diagnostics including speed, fuel level, engine status, etc.      Bidirectional communication between driver and control center via custom message protocol.        Communication Layer:          Implemented TCP socket programming for stable client-server communication.      Multi-threaded architecture to handle GPS reading, vehicle sensor input, and network transmission concurrently.        Database Integration:          Connected C++ backend to MySQL using MySQL Connector/C++.      Designed schema and wrote queries to store and update vehicle telemetry efficiently.      🏗️ Development Tools &amp; Practices:  CMake for cross-platform build configuration.  Conan for dependency management.  Version control with Git.  Modular code structure for maintainability and scalability.⚠️ Challenges &amp; Solutions:  Real-Time Data Synchronization:          Problem: Handling multiple threads without data race conditions or performance bottlenecks.      Solution: Used mutexes and condition variables to safely share resources across threads. Prioritized critical sections and optimized thread sleep intervals.        Unreliable Network Conditions:          Problem: Intermittent connectivity caused data loss.      Solution: Implemented local caching on the device and automatic retry logic when connection was restored.        GPS Signal Loss in Urban Areas:          Problem: Inaccurate or missing location data in tunnels or dense cities.      Solution: Added dead reckoning logic using vehicle speed and heading data to estimate position until GPS signal reappeared.        Cross-Platform Compilation:          Problem: Building and testing on different OS environments.      Solution: Leveraged CMake and Conan to manage dependencies and automate builds across Linux and Windows.      🎯 Result:A robust and scalable vehicle tracking system used in fleet management operations. The system improved operational visibility and allowed for better route planning, maintenance scheduling, and driver communication.🧾 Kosmos GPS - Web Interface &amp; Fleet Management DashboardProject Title: Fleet Management Dashboard – PHP Laravel Web ApplicationDuration: 2 yearsRole: Sole Developer🔧 Technologies Used:  PHP Laravel  MySQL  Google Maps API  RESTful APIs  Blade Templates  JavaScript / jQuery  HTML5 / CSS3📌 Overview:As the sole developer, I designed and built a web-based dashboard to visualize and manage all tracked vehicles in real time. This dashboard served as the central hub for operators to monitor vehicle locations, set destinations, send messages, and analyze historical data.🛠️ Key Features:  Real-Time Map Visualization:          Integrated Google Maps JavaScript API to display live positions of vehicles.      Markers updated dynamically using AJAX calls.        Vehicle Status Panel:          Displayed current vehicle info: location, destination, speed, fuel level, ignition status, and more.        Message Center:          Operators could send and receive text messages to/from drivers through the embedded device.        Historical Tracking:          Stored GPS logs in MySQL and allowed replay of past routes.        User Authentication &amp; Roles:          Admin and operator roles with protected routes using Laravel middleware.        APIs for Mobile Integration:          RESTful endpoints for future mobile app integration.      🏗️ Development Tools &amp; Practices:  Built with Laravel 8+, using Eloquent ORM for clean database interactions.  Blade templates for dynamic views.  Structured controllers and services for maintainable code.  Used Artisan commands for cron jobs and data cleanup.  Deployed on Apache/Nginx with SSL support.⚠️ Challenges &amp; Solutions:  Real-Time Updates Without WebSockets:          Problem: Needed frequent updates without heavy polling.      Solution: Implemented long-polling technique with AJAX to reduce load while keeping UI responsive.        Map Performance with Many Vehicles:          Problem: Lag when rendering large numbers of markers.      Solution: Used marker clustering and only fetched visible vehicles based on zoom level and map bounds.        Time Zone &amp; Localization Issues:          Problem: Users in different regions saw incorrect timestamps.      Solution: Used Laravel’s localization features and converted timestamps on the backend using user preferences.        Secure Communication:          Problem: Prevent unauthorized access to vehicle data.      Solution: Enforced strict API authentication using tokens and rate limiting.      🎯 Result:A fully functional and intuitive dashboard that empowered operators to manage fleets effectively. The system is currently used by logistics companies for real-time monitoring and decision-making."
  },
  
  {
    "title": "Halliburton",
    "url": "/cristiannieto.github.io/posts/halliburton/",
    "categories": "portfolio, software",
    "tags": "linux, cpp",
    "date": "2025-04-11 11:00:00 -0600",
    





    
    "snippet": "Software Modernization at HalliburtonRole: C++ Developer | Team Size: 2 | Duration: 2 YearsTechnologies: C++20, Qt, Qwt6, CMake, 3D Rendering, Linux MigrationProject OverviewHalliburton, a global l...",
    "content": "Software Modernization at HalliburtonRole: C++ Developer | Team Size: 2 | Duration: 2 YearsTechnologies: C++20, Qt, Qwt6, CMake, 3D Rendering, Linux MigrationProject OverviewHalliburton, a global leader in energy services, required modernization of its legacy software to improve performance, maintainability, and compatibility with newer systems. My responsibilities included:  Porting from Qwt5 to Qwt6 – Ensured compatibility with modern Qt while maintaining visualization accuracy.  Migration from qmake to CMake – Improved build system efficiency and cross-platform support.  Migrate from Debian to RHEL-based Linux Improving security &amp; maintainability.  Optimize 3D rendering Using Qt 3D &amp; OpenGL.  Frontend &amp; Backend Optimization – Refactored legacy code in C++20 for better maintainability.  Refactor legacy C++ into modern C++20 Improving performance &amp; maintainability.Key Contributions &amp; Technical Challenges1. Migration from Qwt5 to Qwt6  Challenge:          Qwt6 introduced breaking API changes, particularly in plot rendering and scaling.      The legacy code relied on deprecated Qwt5 features (e.g., QwtPlotZoomer, QwtPlotCurve).        Solution:          Developed wrapper classes to maintain compatibility with existing code.      Implemented automated regression tests (using Google Test) to verify rendering accuracy.      Optimized real-time data plotting by reducing unnecessary redraws.      2. Transition from qmake to CMake  Challenge:          The monolithic qmake build was slow (~15 min full rebuild) and hard to maintain.      Dependency management was manual (.pro files with hardcoded paths).        Solution:          Modularized the project into logical CMake targets (libraries, executables, tests).      Integrated FetchContent for third-party dependencies (e.g., Boost, Eigen).      Reduced build times by 20% using Ninja and ccache.      3. Linux Migration (Debian → RHEL-based Distro)  Challenge:          The legacy system relied on Debian-specific packages (libssl1.0, old glibc).      Some proprietary drivers were incompatible with newer kernels.        Solution:          Used Docker containers to test compatibility before deployment.      Replaced deprecated system calls with POSIX-compliant alternatives.      Worked with IT to ensure secure package signing for enterprise deployment.      4. High-Performance 3D Rendering (Qt 3D &amp; OpenGL)  Challenge:          The existing software-based renderer struggled with large seismic datasets (&gt;1M points).      Frequent UI freezes during data updates.        Solution:          Implemented GPU-accelerated rendering using Qt 3D and OpenGL shaders.      Added Level-of-Detail (LOD) to dynamically reduce mesh complexity.      Introduced asynchronous data loading (threaded QML workers).      5. Modern C++20 Refactoring  Applied:          Concepts (for safer template metaprogramming).      Coroutines (for async data processing).      RAII &amp; smart pointers (eliminating memory leaks).      Results &amp; Impact✔ 20% faster builds (CMake + Ninja).✔ Smoother 3D rendering (60 FPS with OpenGL optimizations).✔ Future-proof codebase (C++20, Qt6, Qwt6).✔ Easier maintenance (modular CMake).About HalliburtonHalliburton is one of the world’s largest providers of products and services to the energy industry. With operations in over 70 countries, it specializes in:  Oilfield drilling &amp; exploration  (drilling, evaluation, completion)  Digital solutions (AI, real-time data analytics)  Hydraulic fracturing &amp; reservoir management  Sustainable Energy InnovationsOur project modernized critical geoscience visualization tools, enabling engineers to analyze subsurface data more efficiently.Why This Project Mattered  Small team, big impact: Despite only two developers, we delivered a production-ready upgrade.  Performance-critical: The software is used in real-time drilling decisions.  Long-term sustainability: The move to CMake, C++20, and Qt6 extended the software’s lifespan.Final NotesThis project was a deep technical challenge, requiring expertise in:✅ Legacy modernization (without breaking existing workflows).✅ Cross-platform builds (CMake, Docker).✅ High-performance 3D graphics (Qt3D, OpenGL).✅ Linux system integration (RHEL, security hardening).Technologies Used  Languages: C++20 (STL, Concepts)  Frameworks: Qt6 (QML, 3D), Qwt6  Build System: CMake  OS: RHEL-based Linux"
  },
  
  {
    "title": "Devbot",
    "url": "/cristiannieto.github.io/posts/devbot/",
    "categories": "portfolio, software",
    "tags": "linux, cpp",
    "date": "2025-04-11 11:00:00 -0600",
    





    
    "snippet": "Game DevelopmentRole: [C++ Developer, Game Programmer]Duration: 1.6 years | Team Size: 4Technologies: Unreal Engine, C++17, BlueprintsProjects: American Football Simulation, Action RPGProjects Deve...",
    "content": "Game DevelopmentRole: [C++ Developer, Game Programmer]Duration: 1.6 years | Team Size: 4Technologies: Unreal Engine, C++17, BlueprintsProjects: American Football Simulation, Action RPGProjects Developed1. American Football Game  Genre: Sports Simulation  Platform: PC  Engine: Unreal Engine 5  Role: Core Gameplay Programmer / Systems DesignerOverview:This prototype aimed to recreate the intensity of American football with dynamic player AI, physics-based tackles, and real-time play calling. The game featured a simplified NFL-style gameplay loop with replays and commentary integration.Key Features:  Realistic physics interactions using PhysX  Play-by-play commentary system  Dynamic camera system for replays  Networked multiplayer support (LAN)Technologies Used:  C++17 for gameplay systems and networking  Niagara particle system for visual effects  Control Rig and Animation Blueprints for character movement  Unreal Multi-User Networking (UMG UI + Replication)2. Action RPG  Genre: Action Role-Playing Game (ARPG)  Platform: PC  Engine: Unreal Engine 5  Role: Combat System Lead / AI Behavior DesignerOverview:A stylized fantasy ARPG featuring fast-paced combat, skill trees, and procedurally generated dungeons. The game focused on responsive controls, enemy AI behavior trees, and a modular inventory system.Key Features:  Modular character build system  State-machine based combat system  Procedural dungeon generation using noise maps  Dialogue system with branching choicesTechnologies Used:  Gameplay Ability System (GAS) in Unreal Engine  Behavior Trees &amp; Blackboard for AI logic  Data Tables for weapon and ability management  MetaHuman framework for character creationChallenges &amp; Solutions | Technical SummaryTechnical Achievements &amp; ChallengesWorking with only four people over 1.6 years presented several challenges, especially when balancing feature development with engine complexity and performance constraints. Below are some of the major challenges we faced and how we solved them:Challenge 1: Performance Optimization in Unreal EngineIssue:As both projects grew in complexity, frame rate dropped significantly due to heavy use of physics and animation blueprints.Solution:  Optimized Blueprint usage by moving critical systems into C++  Implemented object pooling for projectiles and AI actors  Reduced draw calls through material merging and LODs  Profiling with Unreal’s built-in tools like GPU Visualizer and Stat CommandsChallenge 2: Synchronization in Multiplayer (Football)Issue:Desync issues occurred during networked plays due to input latency and inconsistent replication.Solution:  Built a custom prediction and reconciliation system  Used Unreal’s NetCodeQoS plugin for packet loss mitigation  Rewrote movement component to handle server-authoritative updates  Added lag compensation for hit detectionChallenge 3: AI Behavior Complexity (RPG)Issue:Enemy behaviors became too complex to manage in Blueprints alone, leading to spaghetti logic and bugs.Solution:  Refactored all AI logic into Behavior Trees using C++  Created reusable task and decorator classes  Implemented event-driven perception system (sight/hearing)  Used EQS (Environment Query System) for smart enemy pathingTools &amp; Processes We Used  Version Control: Git with GitHub repositories  Task Management: Trello + Notion for sprint planning  Build Pipeline: CI/CD via GitHub Actions for nightly builds  Testing: Automated unit tests using UE’s Automation System  Documentation: In-engine documentation using Doxygen-style commentsLessons Learned  Unreal Engine is powerful but requires discipline in architecture and code quality.  Early prototyping saves time in the long run.  Collaboration tools and version control are essential for remote work.  A big PCConclusionIt was a proving ground for our skills in game development, software engineering, and teamwork. Through trial and error, we gained deep knowledge of Unreal Engine, C++ programming, and game systems design. These experiences have shaped us into stronger developers capable of tackling large-scale projects in professional environments."
  },
  
  {
    "title": "Actinver",
    "url": "/cristiannieto.github.io/posts/actinver/",
    "categories": "portfolio, software",
    "tags": "linux, cpp",
    "date": "2025-04-11 11:00:00 -0600",
    





    
    "snippet": "Project Overview &amp; Company SummaryCompany Overview – ActinverActinver is a leading Mexican financial institution and a key player in the Mexican Stock Exchange (BMV). It provides services in br...",
    "content": "Project Overview &amp; Company SummaryCompany Overview – ActinverActinver is a leading Mexican financial institution and a key player in the Mexican Stock Exchange (BMV). It provides services in brokerage, investment banking, asset management, and proprietary trading. During my time there, I was contracted by Citi to work on a high-performance trading platform project based in their WeWork tower office in Mexico City.I was part of a small but highly skilled team of only three developers, where we were responsible for building a custom low-latency trading system from the ground up. The project lasted for two years and involved developing both backend and UI components using modern technologies while exploring alternatives like Rust and Zig for performance-critical modules.Project SummaryRole: C++ Developer | Team Size: 4 | Duration: 1 YearsTechnologies: C++20, Qt, Qwt6, CMakeTechnical Stack &amp; Development Approach  C++20: Primary language for system development. Leveraged modern features such as concepts, ranges, and coroutines for clean, efficient, and maintainable code.  Build System:          CMake for cross-platform builds      vcpkg for dependency management across multiple libraries        Libraries Used:          Poco C++ Libraries for networking, threading, and utilities        Development Environment:          Linux containers for consistent environments across development, testing, and deployment        Performance Analysis::          Profiling done with tools like perf, Valgrind, and gprof to identify bottlenecks and optimize latency-critical code      Exploratory Languages: Zig &amp; RustAs part of our research phase, we evaluated Zig and Rust as alternatives for certain components:  Zig: Explored for its simplicity and zero-cost abstractions; considered for lightweight utilities but not adopted due to ecosystem maturity.  Rust: Evaluated for memory safety and concurrency features; promising for future projects, but ultimately not chosen due to team expertise and tight deadlines.These experiments helped us understand trade-offs between modern languages and legacy performance needs.🎨 User Interface DevelopmentQt / QML  Built Order Management Systems (OMS) interfaces using Qt/QML, enabling traders to interact with complex financial instruments in real time.  Key advantages:          Native look and feel across platforms.      Efficient multithreading capabilities for background data processing.      Seamless integration with C++ backend engines for low-latency updates.        Developed real-time order book visualization screens, where market depth and trade activity were rendered dynamically based on streaming data from exchanges.WPF + .NET  Developed internal tools and reporting dashboards using Windows Presentation Foundation (WPF) and .NET Framework.  Focused on non-latency-sensitive applications such as compliance reports, audit logs, and user analytics.  WPF provided rich UI capabilities with data binding, templates, and styling, ideal for internal-facing applications with complex visualizations.Bootstrap  Integrated Bootstrap into web-based dashboards and admin panels used for configuration and monitoring.  Ensured responsive layouts and cross-browser compatibility for internal stakeholders accessing tools through browsers.🗄️ Database &amp; Backend Services  Used Firebase Realtime Database for lightweight, real-time synchronization of user preferences, session states, and small-scale datasets.  Firebase was particularly useful for rapid prototyping and MVPs where scalability wasn’t the primary concern.Challenges &amp; Solutions            Challenge      Solution                  High-frequency data updates in UI      Optimized Qt/QML event loop and implemented worker threads using QThread and QtConcurrent to avoid blocking the main thread.              Latency-sensitive order execution      Profiled and optimized key functions using perf and callgrind. Reduced critical path latencies by ~40% through memory layout improvements and reduced lock contention.              Cross-platform consistency (Linux/Windows)      Used CMake and vcpkg to manage platform-specific dependencies. Docker containers ensured build environment consistency.              Small team size and fast-paced delivery      Adopted Agile practices, automated CI/CD pipelines with GitHub Actions, and prioritized modular design to allow parallel development.              Integration between C++ core and UI layers      Created clean APIs and bindings between C++ engines and QML/.NET frontends using Q_INVOKABLE, Q_PROPERTY, and inter-process communication (IPC) mechanisms.      Key Takeaways  Gained deep experience in low-latency software engineering tailored for financial markets.  Mastered modern C++ best practices, tooling, and profiling techniques.  Developed a strong understanding of real-time UI rendering and efficient multithreaded architectures.  Learned how to balance performance vs. developer productivity when evaluating new languages like Zig and Rust.  Proved that small teams can deliver high-impact systems with proper architecture and automation.Technologies Summary            Category      Technologies                  Languages      C++20, QML, C#, XAML, JavaScript              Tools &amp; Frameworks      CMake, vcpkg, Poco, Qt, WPF, Bootstrap              Profiling      perf, Valgrind, callgrind, custom logging              Environments      Linux (containers), Windows              DB &amp; Services      Firebase Realtime Database              DevOps      Docker, GitHub Actions      "
  },
  
  {
    "title": "About Me",
    "url": "/cristiannieto.github.io/posts/about_me/",
    "categories": "portfolio, me",
    "tags": "linux, cpp",
    "date": "2025-04-11 11:00:00 -0600",
    





    
    "snippet": "  std::cout &lt;&lt; \"Hello\\n\"; // No std::endl; old code  try stdout.print(\"Hello!\\n\", .{}); zig codeInterests🖥️ Systems &amp; Programming  Languages: Zig (currently exploring!), C++, Kotlin  Hard...",
    "content": "  std::cout &lt;&lt; \"Hello\\n\"; // No std::endl; old code  try stdout.print(\"Hello!\\n\", .{}); zig codeInterests🖥️ Systems &amp; Programming  Languages: Zig (currently exploring!), C++, Kotlin  Hardware: Fascinated by ARM64 architecture, especially the Snapdragon X Elite and its Linux compatibility challenges.          Current status: Partial support in Ubuntu 24.10 (WiFi, basic graphics work; audio, Bluetooth, NPU still WIP).      🎵 Music            Genre      Favorite Artists                  Jazz Fusion      Casiopea, T-Square, Marcus Miller              Jazz      Benny Goodman, Charles Mingus, Count Basie              Bass Legends      Marcus Miller, Victor Wooten              Bossa Nova      Sergio Mendes, Andrea Motis              Tango      Astor Piazzolla              Symphonic      Various classical composers              Rock      Grand Funk Railroad              Heavy Metal      Deep Purple, Van Halen      📚 ReadingCosmic Horror  H.P. Lovecraft          Key works:                  The Call of Cthulhu (1928)          At the Mountains of Madness (1936)          The Shadow over Innsmouth (1936)                    Quote that like it:                  “The oldest and strongest emotion of mankind is fear, and the oldest and strongest kind of fear is fear of the unknown.”                      Clark Ashton Smith          Key works:                  The City of the Singing Flame (1931)          The Empire of the Necromancers (1932)          The Dark Eidolon (1935)                    Quote that like it:                  “There are horrors beyond life’s edge that we do not suspect.”                      Robert W. Chambers          Key works:                  The King in Yellow (1895, colección de cuentos)          The Repairer of Reputations (1895)          The Yellow Sign (1895)                    Quote that like it:                  “Strangeness that was almost terror hovered about them as they waited.”                      Thomas Ligotti          Key works:                  Songs of a Dead Dreamer (1985)          My Work is Not Yet Done (2002)          The Conspiracy Against the Human Race (2010, ensayo pesimista)                    Quote that like it:                  “Existence is the malign force that tortures itself.”                      Ramsey Campbell          Key works:                  The Inhabitant of the Lake (1964)          The Hungry Moon (1986)          Ancient Images (1989)                    Quote that like it:                  “Fear is the oldest and deepest of human emotions.”                    🎮 Games            Device      Name                  SNES      Super Bomberman              PC      Command and Conquer Red Alert              PSX      Simcity 2000              PC      Fallout 4              PC,Switch,Vita,PS4      Disgaea 4              Arcade,PCEngine      Gradius I      Hobbies🎮 Game Development  Building a custom engine from scratch in C++, ECS, SDL2.  Working in a game with Godot + C++ bindings.  Graphics Programming: Exploring rendering techniques🎼 Music Composition  Jazz fusion pieces inspired by Casiopea, Kukeiha Club and George Duke.  Creating original music pieces  Experimenting with different genres and instrumentation🏋️ Fitness  Cardio: Running, HIIT  Weights: Strength training (5x5 program)."
  }
  
]

